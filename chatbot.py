# -*- coding: utf-8 -*-
"""chatbot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gmlWQuFUMcA2HKXYIH8npLQP21uyvwwy
"""

import json
import random
import pickle
from vectorizer import load_vectorizer
from sklearn.metrics import classification_report
from model import encode_labels
from evaluator import predict_intent

def load_intents(path="data/Intent.json"):
    with open(path, "r") as f:
        data = json.load(f)
    return data["intents"]

def get_response(intent_name, intents):
    for intent in intents:
        if intent["intent"] == intent_name:
            return random.choice(intent["responses"])  # ‚Üê Use random response
    return "Sorry, I don't understand."


def chat_with_evaluation():
    print("Chatbot is ready! Type 'exit' to quit.\n")

    intents = load_intents()
    vectorizer = load_vectorizer("vectorizer.pkl")

    with open("svm_model.pkl", "rb") as f:
        model = pickle.load(f)

    all_labels = [intent["intent"] for intent in intents for _ in intent["text"]]
    _, label_encoder = encode_labels(all_labels)

    # For evaluation
    y_true = []
    y_pred = []
    user_inputs = []

    while True:
        user_input = input("You: ").strip()
        if user_input.lower() == "exit":
            print("Chatbot: Goodbye!")
            break

        predicted_intent = predict_intent(user_input, vectorizer, model, label_encoder)
        response = get_response(predicted_intent, intents)

        print(f"Predicted Intent: {predicted_intent}")
        print(f"Chatbot: {response}\n")

        # Save for evaluation
        user_inputs.append(user_input)
        y_pred.append(predicted_intent)

        # Ask for true intent
        true_intent = input("What was the correct intent? (Press enter to skip): ").strip()
        if true_intent != "":
            y_true.append(true_intent)
        else:
            y_true.append(predicted_intent)  # Assume predicted is true if skipped


    # Evaluation summary
        report = classification_report(y_true, y_pred, zero_division=0, output_dict=True)

        print("\nüìä Evaluation Report (Per-Intent Only):")
        for intent in report.keys():
          if intent not in {"accuracy", "macro avg", "weighted avg"}:
            precision = report[intent]["precision"]
            recall = report[intent]["recall"]
            f1 = report[intent]["f1-score"]
            print(f"{intent:20s} ‚Üí  Precision: {precision:.2f}, Recall: {recall:.2f}, F1: {f1:.2f}")



if __name__ == "__main__":
    chat_with_evaluation()

